files:
  type:
    python: [".py"]
    markdown: [".md"]
    javascript: [".js"]
    java: [".java"]
    html: [".html", ".htm"]
    text: [".txt"]

  labels:
    code: [python, javascript, java, html]
    docs: [markdown, html, text]

directories:
  ignore:
    - "__pycache__"
    - "node_modules"
    - "venv"
    - "env"
    - ".venv"
    - ".env"
    - "build"
    - "dist"
    - ".git"
    - ".svn"
    - ".hg"
    - "tmp"

# checker-specific extra configurations
checkers_extra:
  - name: "LLMSimpleChecker"
    check_name: "LLM simple checker"
    prompt: |
      Please check the code for errors.
      Start your answer with "good" if there are no problems, with "bad" otherwise.
      Please provide a brief description of the problems afterwards.
      The code is here: ```{code}```.
      (Start your answer with "good" if there are no problems, with "bad" otherwise.)
    length_limit: 10000
    # todo: move to file_type in _check_file
    available_extensions:
      - ".py"
      - ".java"
      - ".js"
      - ".ts"
      - ".c"
      - ".cpp"
      - ".h"
      - ".css"
      - ".json"
      - ".md"
      - ".txt"


  - name: "VariablesConsistencyChecker"
    prompt_detect_variables: |
      You are given a code.
      Every line contains its number.
      Please create list of the variables in the following format.
      <line number of first occurance>: <variable name> - short description of the variable meaning
      The code is here: ```{code}```
      Please create a list of the variables in the following format:
      <line number of first occurance>: <variable name> - short description of the variable meaning

    prompt_check_consistency: |
      You are given a list of variables in the following format.
      <line number of first occurance>: <variable name> - short description of the variable meaning
      Please check if the names are used consistently.
      Write 'good' if they are used consistently, 'bad' otherwise. Provide description.
      Good example: 'i - loop index of features, i - loop index of samples'. That is ok (i is a standard one-letter loop variable can for different contexts)
      Not that good example: 'col_index - index of column, column_index - index of column'. That is not ok (names shortening should be consistent)
      Bad example: 'col_index - index of column, index_col - index of column'. That is not ok (names should be consistent)
      Bad example: 'min_loss - value of the best loss, best_loss - value of the best (min) loss'. That is not ok (names should be consistent)
      The list of variables is here:
      [[[{variables}]]]
      Please start your answer with 'good' if everything is allright or 'bad' if anything is wrong.

  - name: "CaseConsistencyChecker"
    prompt_check_case: |
      You are given a code in Python (if it's not Python, please ignore this check).
      Every line contains its number.
      Please check if the case of variable names is used according to PEP8.
      Write 'good' if it is used according to PEP8, 'bad' otherwise. Provide description.
      Good example: 'VARIABLE_A = 5, variable_b = some_function_result(), _variable_c = some_private_value'. That is ok (variable case is consistent)
      Bad example: 'variable_a = 5, Variable_B = some_function_result(), variable_c = some_private_value'. That is not ok (names should be used according to PEP8)
      Bad example: 'Variable_a = 5, variableB = some_function_result(), _variableC = some_private_value'. That is not ok (name should be used according to PEP8)
      The code is here:
      ```{code}```
      Please start your answer with 'good' if everything is allright or 'bad' if anything is wrong.

llms:
  default:
    model: "gpt-5-nano"
    max_tokens: 32_768

    # model: "gpt-4.1-mini"
    # max_tokens: 32_768
    # hm, what max_tokens should be reasonable?7
